From b11aeaddb0083dc1a97af1c67b61374990a8bd8d Mon Sep 17 00:00:00 2001
From: Pinkesh Vaghela <pinkesh.vaghela@einfochips.com>
Date: Thu, 7 Nov 2024 10:41:44 +0000
Subject: [PATCH 109/128] drivers: sound: eswin: Add mutex before registering
 to /proc and /sys

audio_proc_class is a global pointer that is assigned the pointer
after class_create() is called inside audio_proc_module_init().
audio_proc_module_init() maybe called multiple times for different
i2s devices from the probe function.
Sometimes, before the first audio_proc_module_init() is done
with its execution, its called again by other i2s device
This causes race condition and class_create() is called once again which
fails and audio_proc_class is assigned an error value.
Therefore, added a mutex lock before registering audio device to
/proc and /sys/ to prevent crash during probe.

Signed-off-by: Pinkesh Vaghela <pinkesh.vaghela@einfochips.com>
Signed-off-by: Darshan Prajapati <darshan.prajapati@einfochips.com>
---
 sound/soc/eswin/esw-audio-proc.c | 12 ++++++++++--
 1 file changed, 10 insertions(+), 2 deletions(-)

diff --git a/sound/soc/eswin/esw-audio-proc.c b/sound/soc/eswin/esw-audio-proc.c
index ff372ff2d93a..9c7834b44c59 100644
--- a/sound/soc/eswin/esw-audio-proc.c
+++ b/sound/soc/eswin/esw-audio-proc.c
@@ -27,6 +27,7 @@
 #include <linux/eventfd.h>
 #include <linux/ioctl.h>
 #include <linux/device.h>
+#include <linux/mutex.h>
 
 // proc data definition
 typedef enum
@@ -79,6 +80,7 @@ static int audio_proc_major[NUM_DEVICES] = {0};
 static struct class *audio_proc_class = NULL;
 static struct device *audio_proc_device[NUM_DEVICES] = {NULL};
 static int32_t *g_perf_data[NUM_DEVICES] = {NULL};
+static DEFINE_MUTEX(audio_proc_class_lock);
 
 static void show_aenc_data(struct seq_file *m)
 {
@@ -393,15 +395,19 @@ int audio_proc_module_init(void)
 	int i, ret;
 	struct device *dev;
 
+	pr_info("audio_proc_module_init enter.\n");
+
+	mutex_lock(&audio_proc_class_lock);
+
 	if (g_proc_initialized) {
+		mutex_unlock(&audio_proc_class_lock);
 		return 0;
 	}
 
-	pr_info("audio_proc_module_init enter.\n");
-
 	audio_proc_class = class_create("audio_proc_class");
 	if (IS_ERR(audio_proc_class)) {
 		pr_err("Failed to create audio_proc_class\n");
+		mutex_unlock(&audio_proc_class_lock);
 		return PTR_ERR(audio_proc_class);
 	}
 
@@ -436,6 +442,7 @@ int audio_proc_module_init(void)
 	g_proc_initialized = true;
 
 	pr_info("es_audio_proc: initialized\n");
+	mutex_unlock(&audio_proc_class_lock);
 	return 0;
 
 cleanup:
@@ -455,6 +462,7 @@ int audio_proc_module_init(void)
 	}
 
 	class_destroy(audio_proc_class);
+	mutex_unlock(&audio_proc_class_lock);
 	return ret;
 }
 
-- 
2.47.0

